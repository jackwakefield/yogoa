package yogoa

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGRoundingTest.html

func TestRoundingFlexBasisFlexGrowRowWidthOf100(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 33, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 33, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 34, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 67, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 33, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 67, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 33, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 33, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 34, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 33, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())
}

func TestRoundingFlexBasisFlexGrowRowPrimeNumberWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(113)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetFlexGrow(1)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetFlexGrow(1)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 113, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 23, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 23, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 22, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 45, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 23, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	assert.EqualValues(t, 68, root_child3.Layout().Left())
	assert.EqualValues(t, 0, root_child3.Layout().Top())
	assert.EqualValues(t, 22, root_child3.Layout().Width())
	assert.EqualValues(t, 100, root_child3.Layout().Height())

	assert.EqualValues(t, 90, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 23, root_child4.Layout().Width())
	assert.EqualValues(t, 100, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 113, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 23, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 68, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 22, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 45, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 23, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	assert.EqualValues(t, 23, root_child3.Layout().Left())
	assert.EqualValues(t, 0, root_child3.Layout().Top())
	assert.EqualValues(t, 22, root_child3.Layout().Width())
	assert.EqualValues(t, 100, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 23, root_child4.Layout().Width())
	assert.EqualValues(t, 100, root_child4.Layout().Height())
}

func TestRoundingFlexBasisFlexShrinkRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(101)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexShrink(1)
	root_child0.Style().SetFlexBasis(100)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexBasis(25)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexBasis(25)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 101, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 51, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 51, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 25, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 76, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 25, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 101, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 51, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 25, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 25, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 25, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())
}

func TestRoundingFlexBasisOverridesMainSize(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(113)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(50)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 113, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 64, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 64, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 24, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 113, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 64, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 64, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 24, root_child2.Layout().Height())
}

func TestRoundingTotalFractial(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(87.4)
	root.Style().SetHeight(113.4)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(0.7)
	root_child0.Style().SetFlexBasis(50.3)
	root_child0.Style().SetHeight(20.3)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1.6)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1.1)
	root_child2.Style().SetHeight(10.7)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 87, root.Layout().Width())
	assert.EqualValues(t, 113, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 87, root_child0.Layout().Width())
	assert.EqualValues(t, 59, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 59, root_child1.Layout().Top())
	assert.EqualValues(t, 87, root_child1.Layout().Width())
	assert.EqualValues(t, 30, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 87, root_child2.Layout().Width())
	assert.EqualValues(t, 24, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 87, root.Layout().Width())
	assert.EqualValues(t, 113, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 87, root_child0.Layout().Width())
	assert.EqualValues(t, 59, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 59, root_child1.Layout().Top())
	assert.EqualValues(t, 87, root_child1.Layout().Width())
	assert.EqualValues(t, 30, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 87, root_child2.Layout().Width())
	assert.EqualValues(t, 24, root_child2.Layout().Height())
}

func TestRoundingTotalFractialNested(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(87.4)
	root.Style().SetHeight(113.4)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(0.7)
	root_child0.Style().SetFlexBasis(50.3)
	root_child0.Style().SetHeight(20.3)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexBasis(0.3)
	root_child0_child0.Style().SetPosition(EdgeBottom, 13.3)
	root_child0_child0.Style().SetHeight(9.9)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child1.Free()
	root_child0_child1.Style().SetFlexGrow(4)
	root_child0_child1.Style().SetFlexBasis(0.3)
	root_child0_child1.Style().SetPosition(EdgeTop, 13.3)
	root_child0_child1.Style().SetHeight(1.1)
	root_child0.InsertChild(root_child0_child1, 1)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1.6)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1.1)
	root_child2.Style().SetHeight(10.7)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 87, root.Layout().Width())
	assert.EqualValues(t, 113, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 87, root_child0.Layout().Width())
	assert.EqualValues(t, 59, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, -13, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 87, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 12, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 25, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 87, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 47, root_child0_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 59, root_child1.Layout().Top())
	assert.EqualValues(t, 87, root_child1.Layout().Width())
	assert.EqualValues(t, 30, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 87, root_child2.Layout().Width())
	assert.EqualValues(t, 24, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 87, root.Layout().Width())
	assert.EqualValues(t, 113, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 87, root_child0.Layout().Width())
	assert.EqualValues(t, 59, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, -13, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 87, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 12, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 25, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 87, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 47, root_child0_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 59, root_child1.Layout().Top())
	assert.EqualValues(t, 87, root_child1.Layout().Width())
	assert.EqualValues(t, 30, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 87, root_child2.Layout().Width())
	assert.EqualValues(t, 24, root_child2.Layout().Height())
}

func TestRoundingFractialInput1(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(113.4)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(50)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 113, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 64, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 64, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 24, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 113, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 64, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 64, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 24, root_child2.Layout().Height())
}

func TestRoundingFractialInput2(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(113.6)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(50)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 114, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 65, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 65, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 24, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 25, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 114, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 65, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 65, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 24, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 25, root_child2.Layout().Height())
}

func TestRoundingFractialInput3(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetPosition(EdgeTop, 0.3)
	root.Style().SetWidth(100)
	root.Style().SetHeight(113.4)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(50)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 114, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 65, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 64, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 24, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 25, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 114, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 65, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 64, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 24, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 25, root_child2.Layout().Height())
}

func TestRoundingFractialInput4(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetPosition(EdgeTop, 0.7)
	root.Style().SetWidth(100)
	root.Style().SetHeight(113.4)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(50)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 1, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 113, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 64, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 64, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 24, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 1, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 113, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 64, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 64, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 89, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 24, root_child2.Layout().Height())
}

func TestRoundingInnerNodeControversyHorizontal(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(320)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetFlexGrow(1)
	root_child1_child0.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 320, root.Layout().Width())
	assert.EqualValues(t, 10, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 107, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 107, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 106, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 106, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 213, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 107, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 320, root.Layout().Width())
	assert.EqualValues(t, 10, root.Layout().Height())

	assert.EqualValues(t, 213, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 107, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 107, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 106, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 106, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 107, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestRoundingInnerNodeControversyVertical(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetHeight(320)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetWidth(10)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetFlexGrow(1)
	root_child1_child0.Style().SetWidth(10)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root_child2.Style().SetWidth(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 10, root.Layout().Width())
	assert.EqualValues(t, 320, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 107, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 107, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 106, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 106, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 213, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 107, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 10, root.Layout().Width())
	assert.EqualValues(t, 320, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 107, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 107, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 106, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 106, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 213, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 107, root_child2.Layout().Height())
}

func TestRoundingInnerNodeControversyCombined(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(640)
	root.Style().SetHeight(320)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetHeightPercent(100)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetHeightPercent(100)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetFlexGrow(1)
	root_child1_child0.Style().SetWidthPercent(100)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child1_child1 := NewNodeWithConfig(config)
	defer root_child1_child1.Free()
	root_child1_child1.Style().SetFlexGrow(1)
	root_child1_child1.Style().SetWidthPercent(100)
	root_child1.InsertChild(root_child1_child1, 1)

	root_child1_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child1_child0.Free()
	root_child1_child1_child0.Style().SetFlexGrow(1)
	root_child1_child1_child0.Style().SetWidthPercent(100)
	root_child1_child1.InsertChild(root_child1_child1_child0, 0)

	root_child1_child2 := NewNodeWithConfig(config)
	defer root_child1_child2.Free()
	root_child1_child2.Style().SetFlexGrow(1)
	root_child1_child2.Style().SetWidthPercent(100)
	root_child1.InsertChild(root_child1_child2, 2)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root_child2.Style().SetHeightPercent(100)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 640, root.Layout().Width())
	assert.EqualValues(t, 320, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 213, root_child0.Layout().Width())
	assert.EqualValues(t, 320, root_child0.Layout().Height())

	assert.EqualValues(t, 213, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 214, root_child1.Layout().Width())
	assert.EqualValues(t, 320, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 214, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 107, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child1.Layout().Left())
	assert.EqualValues(t, 107, root_child1_child1.Layout().Top())
	assert.EqualValues(t, 214, root_child1_child1.Layout().Width())
	assert.EqualValues(t, 106, root_child1_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child1_child0.Layout().Top())
	assert.EqualValues(t, 214, root_child1_child1_child0.Layout().Width())
	assert.EqualValues(t, 106, root_child1_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child2.Layout().Left())
	assert.EqualValues(t, 213, root_child1_child2.Layout().Top())
	assert.EqualValues(t, 214, root_child1_child2.Layout().Width())
	assert.EqualValues(t, 107, root_child1_child2.Layout().Height())

	assert.EqualValues(t, 427, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 213, root_child2.Layout().Width())
	assert.EqualValues(t, 320, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 640, root.Layout().Width())
	assert.EqualValues(t, 320, root.Layout().Height())

	assert.EqualValues(t, 427, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 213, root_child0.Layout().Width())
	assert.EqualValues(t, 320, root_child0.Layout().Height())

	assert.EqualValues(t, 213, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 214, root_child1.Layout().Width())
	assert.EqualValues(t, 320, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 214, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 107, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child1.Layout().Left())
	assert.EqualValues(t, 107, root_child1_child1.Layout().Top())
	assert.EqualValues(t, 214, root_child1_child1.Layout().Width())
	assert.EqualValues(t, 106, root_child1_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child1_child0.Layout().Top())
	assert.EqualValues(t, 214, root_child1_child1_child0.Layout().Width())
	assert.EqualValues(t, 106, root_child1_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child2.Layout().Left())
	assert.EqualValues(t, 213, root_child1_child2.Layout().Top())
	assert.EqualValues(t, 214, root_child1_child2.Layout().Width())
	assert.EqualValues(t, 107, root_child1_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 213, root_child2.Layout().Width())
	assert.EqualValues(t, 320, root_child2.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGJustifyContentTest.html

func TestJustifyContentRowFlexStart(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 102, root_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 102, root_child1.Layout().Height())

	assert.EqualValues(t, 20, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 102, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 92, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 102, root_child0.Layout().Height())

	assert.EqualValues(t, 82, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 102, root_child1.Layout().Height())

	assert.EqualValues(t, 72, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 102, root_child2.Layout().Height())
}

func TestJustifyContentRowFlexEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetJustifyContent(JustifyFlexEnd)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 72, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 102, root_child0.Layout().Height())

	assert.EqualValues(t, 82, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 102, root_child1.Layout().Height())

	assert.EqualValues(t, 92, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 102, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 20, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 102, root_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 102, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 102, root_child2.Layout().Height())
}

func TestJustifyContentRowCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 36, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 102, root_child0.Layout().Height())

	assert.EqualValues(t, 46, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 102, root_child1.Layout().Height())

	assert.EqualValues(t, 56, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 102, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 56, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 102, root_child0.Layout().Height())

	assert.EqualValues(t, 46, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 102, root_child1.Layout().Height())

	assert.EqualValues(t, 36, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 102, root_child2.Layout().Height())
}

func TestJustifyContentRowSpaceBetween(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetJustifyContent(JustifySpaceBetween)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 102, root_child0.Layout().Height())

	assert.EqualValues(t, 46, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 102, root_child1.Layout().Height())

	assert.EqualValues(t, 92, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 102, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 92, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 102, root_child0.Layout().Height())

	assert.EqualValues(t, 46, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 102, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 102, root_child2.Layout().Height())
}

func TestJustifyContentRowSpaceAround(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetJustifyContent(JustifySpaceAround)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 12, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 102, root_child0.Layout().Height())

	assert.EqualValues(t, 46, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 102, root_child1.Layout().Height())

	assert.EqualValues(t, 80, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 102, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 102, root_child0.Layout().Height())

	assert.EqualValues(t, 46, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 102, root_child1.Layout().Height())

	assert.EqualValues(t, 12, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 102, root_child2.Layout().Height())
}

func TestJustifyContentColumnFlexStart(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestJustifyContentColumnFlexEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyFlexEnd)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 72, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 82, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 92, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 72, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 82, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 92, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestJustifyContentColumnCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 36, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 46, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 56, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 36, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 46, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 56, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestJustifyContentColumnSpaceBetween(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifySpaceBetween)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 46, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 92, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 46, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 92, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestJustifyContentColumnSpaceAround(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifySpaceAround)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 12, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 46, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 80, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 12, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 46, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 80, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestJustifyContentRowMinWidthAndMargin(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetMargin(EdgeLeft, 100)
	root.Style().SetMinWidth(50)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(20)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 100, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 50, root.Layout().Width())
	assert.EqualValues(t, 20, root.Layout().Height())

	assert.EqualValues(t, 15, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 100, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 50, root.Layout().Width())
	assert.EqualValues(t, 20, root.Layout().Height())

	assert.EqualValues(t, 15, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())
}

func TestJustifyContentRowMaxWidthAndMargin(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetMargin(EdgeLeft, 100)
	root.Style().SetWidth(100)
	root.Style().SetMaxWidth(80)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(20)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 100, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 80, root.Layout().Width())
	assert.EqualValues(t, 20, root.Layout().Height())

	assert.EqualValues(t, 30, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 100, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 80, root.Layout().Width())
	assert.EqualValues(t, 20, root.Layout().Height())

	assert.EqualValues(t, 30, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())
}

func TestJustifyContentColumnMinHeightAndMargin(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetMargin(EdgeTop, 100)
	root.Style().SetMinHeight(50)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(20)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 100, root.Layout().Top())
	assert.EqualValues(t, 20, root.Layout().Width())
	assert.EqualValues(t, 50, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 15, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 100, root.Layout().Top())
	assert.EqualValues(t, 20, root.Layout().Width())
	assert.EqualValues(t, 50, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 15, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())
}

func TestJustifyContentColunnMaxHeightAndMargin(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetMargin(EdgeTop, 100)
	root.Style().SetHeight(100)
	root.Style().SetMaxHeight(80)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(20)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 100, root.Layout().Top())
	assert.EqualValues(t, 20, root.Layout().Width())
	assert.EqualValues(t, 80, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 100, root.Layout().Top())
	assert.EqualValues(t, 20, root.Layout().Width())
	assert.EqualValues(t, 80, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())
}

func TestJustifyContentColumnSpaceEvenly(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifySpaceEvenly)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 18, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 46, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 74, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 18, root_child0.Layout().Top())
	assert.EqualValues(t, 102, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 46, root_child1.Layout().Top())
	assert.EqualValues(t, 102, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 74, root_child2.Layout().Top())
	assert.EqualValues(t, 102, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestJustifyContentRowSpaceEvenly(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetJustifyContent(JustifySpaceEvenly)
	root.Style().SetWidth(102)
	root.Style().SetHeight(102)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 26, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 51, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 77, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 0, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 102, root.Layout().Width())
	assert.EqualValues(t, 102, root.Layout().Height())

	assert.EqualValues(t, 77, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 51, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 26, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 0, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestJustifyContentMinWidthWithPaddingChildWidthGreaterThanParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(1000)
	root.Style().SetHeight(1584)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetAlignContent(AlignStretch)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0.Style().SetJustifyContent(JustifyCenter)
	root_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0.Style().SetPadding(EdgeLeft, 100)
	root_child0_child0.Style().SetPadding(EdgeRight, 100)
	root_child0_child0.Style().SetMinWidth(400)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child0.Style().SetWidth(300)
	root_child0_child0_child0.Style().SetHeight(100)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 1000, root.Layout().Width())
	assert.EqualValues(t, 1584, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 1000, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 100, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 300, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 1000, root.Layout().Width())
	assert.EqualValues(t, 1584, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 1000, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 500, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 100, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 300, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0_child0.Layout().Height())
}

func TestJustifyContentMinWidthWithPaddingChildWidthLowerThanParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(1080)
	root.Style().SetHeight(1584)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetAlignContent(AlignStretch)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0.Style().SetJustifyContent(JustifyCenter)
	root_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0.Style().SetPadding(EdgeLeft, 100)
	root_child0_child0.Style().SetPadding(EdgeRight, 100)
	root_child0_child0.Style().SetMinWidth(400)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child0.Style().SetWidth(199)
	root_child0_child0_child0.Style().SetHeight(100)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 1080, root.Layout().Width())
	assert.EqualValues(t, 1584, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 1080, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 400, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 101, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 199, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 1080, root.Layout().Width())
	assert.EqualValues(t, 1584, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 1080, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 680, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 400, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 101, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 199, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0_child0.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGPercentageTest.html

func TestPercentageWidthHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidthPercent(30)
	root_child0.Style().SetHeightPercent(30)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 140, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())
}

func TestPercentagePositionLeftTop(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(400)
	root.Style().SetHeight(400)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionPercent(EdgeLeft, 10)
	root_child0.Style().SetPositionPercent(EdgeTop, 20)
	root_child0.Style().SetWidthPercent(45)
	root_child0.Style().SetHeightPercent(55)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 400, root.Layout().Width())
	assert.EqualValues(t, 400, root.Layout().Height())

	assert.EqualValues(t, 40, root_child0.Layout().Left())
	assert.EqualValues(t, 80, root_child0.Layout().Top())
	assert.EqualValues(t, 180, root_child0.Layout().Width())
	assert.EqualValues(t, 220, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 400, root.Layout().Width())
	assert.EqualValues(t, 400, root.Layout().Height())

	assert.EqualValues(t, 260, root_child0.Layout().Left())
	assert.EqualValues(t, 80, root_child0.Layout().Top())
	assert.EqualValues(t, 180, root_child0.Layout().Width())
	assert.EqualValues(t, 220, root_child0.Layout().Height())
}

func TestPercentagePositionBottomRight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(500)
	root.Style().SetHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionPercent(EdgeRight, 20)
	root_child0.Style().SetPositionPercent(EdgeBottom, 10)
	root_child0.Style().SetWidthPercent(55)
	root_child0.Style().SetHeightPercent(15)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, -100, root_child0.Layout().Left())
	assert.EqualValues(t, -50, root_child0.Layout().Top())
	assert.EqualValues(t, 275, root_child0.Layout().Width())
	assert.EqualValues(t, 75, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 125, root_child0.Layout().Left())
	assert.EqualValues(t, -50, root_child0.Layout().Top())
	assert.EqualValues(t, 275, root_child0.Layout().Width())
	assert.EqualValues(t, 75, root_child0.Layout().Height())
}

func TestPercentageFlexBasis(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasisPercent(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetFlexBasisPercent(25)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 125, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 125, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 75, root_child1.Layout().Width())
	assert.EqualValues(t, 200, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 125, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 75, root_child1.Layout().Width())
	assert.EqualValues(t, 200, root_child1.Layout().Height())
}

func TestPercentageFlexBasisCross(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasisPercent(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetFlexBasisPercent(25)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 125, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 125, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 75, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 125, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 125, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 75, root_child1.Layout().Height())
}

func TestPercentageFlexBasisCrossMinHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMinHeightPercent(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(2)
	root_child1.Style().SetMinHeightPercent(10)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 140, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 140, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 60, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 140, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 140, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 60, root_child1.Layout().Height())
}

func TestPercentageFlexBasisMainMaxHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasisPercent(10)
	root_child0.Style().SetMaxHeightPercent(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(4)
	root_child1.Style().SetFlexBasisPercent(10)
	root_child1.Style().SetMaxHeightPercent(20)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 52, root_child0.Layout().Width())
	assert.EqualValues(t, 120, root_child0.Layout().Height())

	assert.EqualValues(t, 52, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 148, root_child1.Layout().Width())
	assert.EqualValues(t, 40, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 148, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 52, root_child0.Layout().Width())
	assert.EqualValues(t, 120, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 148, root_child1.Layout().Width())
	assert.EqualValues(t, 40, root_child1.Layout().Height())
}

func TestPercentageFlexBasisCrossMaxHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasisPercent(10)
	root_child0.Style().SetMaxHeightPercent(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(4)
	root_child1.Style().SetFlexBasisPercent(10)
	root_child1.Style().SetMaxHeightPercent(20)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 120, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 120, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 40, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 120, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 120, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 40, root_child1.Layout().Height())
}

func TestPercentageFlexBasisMainMaxWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasisPercent(15)
	root_child0.Style().SetMaxWidthPercent(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(4)
	root_child1.Style().SetFlexBasisPercent(10)
	root_child1.Style().SetMaxWidthPercent(20)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 120, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 120, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 40, root_child1.Layout().Width())
	assert.EqualValues(t, 200, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 120, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 40, root_child1.Layout().Width())
	assert.EqualValues(t, 200, root_child1.Layout().Height())
}

func TestPercentageFlexBasisCrossMaxWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasisPercent(10)
	root_child0.Style().SetMaxWidthPercent(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(4)
	root_child1.Style().SetFlexBasisPercent(15)
	root_child1.Style().SetMaxWidthPercent(20)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 120, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 40, root_child1.Layout().Width())
	assert.EqualValues(t, 150, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 120, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 160, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 40, root_child1.Layout().Width())
	assert.EqualValues(t, 150, root_child1.Layout().Height())
}

func TestPercentageFlexBasisMainMinWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasisPercent(15)
	root_child0.Style().SetMinWidthPercent(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(4)
	root_child1.Style().SetFlexBasisPercent(10)
	root_child1.Style().SetMinWidthPercent(20)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 120, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 120, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 80, root_child1.Layout().Width())
	assert.EqualValues(t, 200, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 120, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 80, root_child1.Layout().Width())
	assert.EqualValues(t, 200, root_child1.Layout().Height())
}

func TestPercentageFlexBasisCrossMinWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasisPercent(10)
	root_child0.Style().SetMinWidthPercent(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(4)
	root_child1.Style().SetFlexBasisPercent(15)
	root_child1.Style().SetMinWidthPercent(20)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 150, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 150, root_child1.Layout().Height())
}

func TestPercentageMultipleNestedWithPaddingMarginAndPercentageValues(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasisPercent(10)
	root_child0.Style().SetMargin(EdgeLeft, 5)
	root_child0.Style().SetMargin(EdgeTop, 5)
	root_child0.Style().SetMargin(EdgeRight, 5)
	root_child0.Style().SetMargin(EdgeBottom, 5)
	root_child0.Style().SetPadding(EdgeLeft, 3)
	root_child0.Style().SetPadding(EdgeTop, 3)
	root_child0.Style().SetPadding(EdgeRight, 3)
	root_child0.Style().SetPadding(EdgeBottom, 3)
	root_child0.Style().SetMinWidthPercent(60)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetMargin(EdgeLeft, 5)
	root_child0_child0.Style().SetMargin(EdgeTop, 5)
	root_child0_child0.Style().SetMargin(EdgeRight, 5)
	root_child0_child0.Style().SetMargin(EdgeBottom, 5)
	root_child0_child0.Style().SetPaddingPercent(EdgeLeft, 3)
	root_child0_child0.Style().SetPaddingPercent(EdgeTop, 3)
	root_child0_child0.Style().SetPaddingPercent(EdgeRight, 3)
	root_child0_child0.Style().SetPaddingPercent(EdgeBottom, 3)
	root_child0_child0.Style().SetWidthPercent(50)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetMarginPercent(EdgeLeft, 5)
	root_child0_child0_child0.Style().SetMarginPercent(EdgeTop, 5)
	root_child0_child0_child0.Style().SetMarginPercent(EdgeRight, 5)
	root_child0_child0_child0.Style().SetMarginPercent(EdgeBottom, 5)
	root_child0_child0_child0.Style().SetPadding(EdgeLeft, 3)
	root_child0_child0_child0.Style().SetPadding(EdgeTop, 3)
	root_child0_child0_child0.Style().SetPadding(EdgeRight, 3)
	root_child0_child0_child0.Style().SetPadding(EdgeBottom, 3)
	root_child0_child0_child0.Style().SetWidthPercent(45)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(4)
	root_child1.Style().SetFlexBasisPercent(15)
	root_child1.Style().SetMinWidthPercent(20)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 5, root_child0.Layout().Left())
	assert.EqualValues(t, 5, root_child0.Layout().Top())
	assert.EqualValues(t, 190, root_child0.Layout().Width())
	assert.EqualValues(t, 48, root_child0.Layout().Height())

	assert.EqualValues(t, 8, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 8, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 92, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 25, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 36, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 6, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 58, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 142, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 5, root_child0.Layout().Left())
	assert.EqualValues(t, 5, root_child0.Layout().Top())
	assert.EqualValues(t, 190, root_child0.Layout().Width())
	assert.EqualValues(t, 48, root_child0.Layout().Height())

	assert.EqualValues(t, 90, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 8, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 92, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 25, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 46, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 36, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 6, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 58, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 142, root_child1.Layout().Height())
}

func TestPercentageMarginShouldCalculateBasedOnlyOnWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMarginPercent(EdgeLeft, 10)
	root_child0.Style().SetMarginPercent(EdgeTop, 10)
	root_child0.Style().SetMarginPercent(EdgeRight, 10)
	root_child0.Style().SetMarginPercent(EdgeBottom, 10)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(10)
	root_child0_child0.Style().SetHeight(10)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 20, root_child0.Layout().Left())
	assert.EqualValues(t, 20, root_child0.Layout().Top())
	assert.EqualValues(t, 160, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 20, root_child0.Layout().Left())
	assert.EqualValues(t, 20, root_child0.Layout().Top())
	assert.EqualValues(t, 160, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	assert.EqualValues(t, 150, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Height())
}

func TestPercentagePaddingShouldCalculateBasedOnlyOnWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetPaddingPercent(EdgeLeft, 10)
	root_child0.Style().SetPaddingPercent(EdgeTop, 10)
	root_child0.Style().SetPaddingPercent(EdgeRight, 10)
	root_child0.Style().SetPaddingPercent(EdgeBottom, 10)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(10)
	root_child0_child0.Style().SetHeight(10)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 20, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 170, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Height())
}

func TestPercentageAbsolutePosition(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPositionPercent(EdgeLeft, 30)
	root_child0.Style().SetPositionPercent(EdgeTop, 10)
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 60, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 60, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestPercentageWidthHeightUndefinedParentSize(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidthPercent(50)
	root_child0.Style().SetHeightPercent(50)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 0, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 0, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())
}

func TestPercentWithinFlexGrow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(350)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(100)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidthPercent(100)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(100)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 350, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 100, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 150, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 150, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 250, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 350, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 250, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 100, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 150, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 150, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())
}

func TestPercentageContainerInWrappingContainer(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0.Style().SetJustifyContent(JustifyCenter)
	root_child0_child0.Style().SetWidthPercent(100)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetWidth(50)
	root_child0_child0_child0.Style().SetHeight(50)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)

	root_child0_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child0_child1.Free()
	root_child0_child0_child1.Style().SetWidth(50)
	root_child0_child0_child1.Style().SetHeight(50)
	root_child0_child0.InsertChild(root_child0_child0_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 75, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child0_child0_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 75, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0_child1.Layout().Height())
}

func TestPercentAbsolutePosition(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(60)
	root.Style().SetHeight(50)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPositionPercent(EdgeLeft, 50)
	root_child0.Style().SetWidthPercent(100)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidthPercent(100)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child1.Free()
	root_child0_child1.Style().SetWidthPercent(100)
	root_child0.InsertChild(root_child0_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 60, root.Layout().Width())
	assert.EqualValues(t, 50, root.Layout().Height())

	assert.EqualValues(t, 30, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 60, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 60, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 60, root.Layout().Width())
	assert.EqualValues(t, 50, root.Layout().Height())

	assert.EqualValues(t, 30, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Height())

	assert.EqualValues(t, -60, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 60, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child1.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGDimensionTest.html

func TestWrapChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(100)
	root_child0.Style().SetHeight(100)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())
}

func TestWrapGrandchild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(100)
	root_child0_child0.Style().SetHeight(100)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGMinMaxDimensionTest.html

func TestMaxWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMaxWidth(50)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestMaxHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetMaxHeight(50)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())
}

func TestMinHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMinHeight(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 80, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 80, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())
}

func TestMinWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMinWidth(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 80, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 20, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 20, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 20, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())
}

func TestJustifyContentMinMax(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetWidth(100)
	root.Style().SetMinHeight(100)
	root.Style().SetMaxHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(60)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 20, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 40, root_child0.Layout().Left())
	assert.EqualValues(t, 20, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())
}

func TestAlignItemsMinMax(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetMinWidth(100)
	root.Style().SetMaxWidth(200)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(60)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 20, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 20, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())
}

func TestJustifyContentOverflowMinMax(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetMinHeight(100)
	root.Style().SetMaxHeight(110)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(50)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 50, root.Layout().Width())
	assert.EqualValues(t, 110, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, -20, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 30, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 80, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 50, root.Layout().Width())
	assert.EqualValues(t, 110, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, -20, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 30, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 80, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())
}

func TestFlexGrowToMin(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetMinHeight(100)
	root.Style().SetMaxHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexShrink(1)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestFlexGrowInAtMostContainer(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignFlexStart)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexBasis(0)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Height())
}

func TestFlexGrowChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(0)
	root_child0.Style().SetHeight(100)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())
}

func TestFlexGrowWithinConstrainedMinMaxColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetMinHeight(100)
	root.Style().SetMaxHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestFlexGrowWithinMaxWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetMaxWidth(100)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetHeight(20)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Height())
}

func TestFlexGrowWithinConstrainedMaxWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetMaxWidth(300)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetHeight(20)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Height())
}

func TestFlexRootIgnored(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexGrow(1)
	root.Style().SetWidth(100)
	root.Style().SetMinHeight(100)
	root.Style().SetMaxHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(200)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(100)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 300, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 200, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 300, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 200, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())
}

func TestFlexGrowRootMinimized(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetMinHeight(100)
	root.Style().SetMaxHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMinHeight(100)
	root_child0.Style().SetMaxHeight(500)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexBasis(200)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child1.Free()
	root_child0_child1.Style().SetHeight(100)
	root_child0.InsertChild(root_child0_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 300, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 300, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 200, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 300, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 300, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 200, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child1.Layout().Height())
}

func TestFlexGrowHeightMaximized(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMinHeight(100)
	root_child0.Style().SetMaxHeight(500)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexBasis(200)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child1.Free()
	root_child0_child1.Style().SetHeight(100)
	root_child0.InsertChild(root_child0_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 500, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 400, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 400, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 500, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 400, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 400, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child1.Layout().Height())
}

func TestFlexGrowWithinConstrainedMinRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetMinWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())
}

func TestFlexGrowWithinConstrainedMinColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetMinHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestFlexGrowWithinConstrainedMaxRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetMaxWidth(100)
	root_child0.Style().SetHeight(100)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexShrink(1)
	root_child0_child0.Style().SetFlexBasis(100)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child1.Free()
	root_child0_child1.Style().SetWidth(50)
	root_child0.InsertChild(root_child0_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child1.Layout().Height())
}

func TestFlexGrowWithinConstrainedMaxColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetMaxHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexShrink(1)
	root_child0.Style().SetFlexBasis(100)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestChildMinMaxWidthFlexing(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(120)
	root.Style().SetHeight(50)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(0)
	root_child0.Style().SetMinWidth(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetFlexBasisPercent(50)
	root_child1.Style().SetMaxWidth(20)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 120, root.Layout().Width())
	assert.EqualValues(t, 50, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 100, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 20, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 120, root.Layout().Width())
	assert.EqualValues(t, 50, root.Layout().Height())

	assert.EqualValues(t, 20, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 20, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMinWidthOverridesWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(50)
	root.Style().SetMinWidth(100)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 0, root.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 0, root.Layout().Height())
}

func TestMaxWidthOverridesWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetMaxWidth(100)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 0, root.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 0, root.Layout().Height())
}

func TestMinHeightOverridesHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetHeight(50)
	root.Style().SetMinHeight(100)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())
}

func TestMaxHeightOverridesHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetHeight(200)
	root.Style().SetMaxHeight(100)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 0, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())
}

func TestMinMaxPercentNoWidthHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignFlexStart)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMinWidthPercent(10)
	root_child0.Style().SetMaxWidthPercent(10)
	root_child0.Style().SetMinHeightPercent(10)
	root_child0.Style().SetMaxHeightPercent(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGDisplayTest.html

func TestDisplayNone(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetDisplay(DisplayNone)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())
}

func TestDisplayNoneFixedSize(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(20)
	root_child1.Style().SetHeight(20)
	root_child1.Style().SetDisplay(DisplayNone)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())
}

func TestDisplayNoneWithMargin(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMargin(EdgeLeft, 10)
	root_child0.Style().SetMargin(EdgeTop, 10)
	root_child0.Style().SetMargin(EdgeRight, 10)
	root_child0.Style().SetMargin(EdgeBottom, 10)
	root_child0.Style().SetWidth(20)
	root_child0.Style().SetHeight(20)
	root_child0.Style().SetDisplay(DisplayNone)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())
}

func TestDisplayNoneWithChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexShrink(1)
	root_child0.Style().SetFlexBasisPercent(0)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetFlexShrink(1)
	root_child1.Style().SetFlexBasisPercent(0)
	root_child1.Style().SetDisplay(DisplayNone)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetFlexGrow(1)
	root_child1_child0.Style().SetFlexShrink(1)
	root_child1_child0.Style().SetFlexBasisPercent(0)
	root_child1_child0.Style().SetWidth(20)
	root_child1_child0.Style().SetMinWidth(0)
	root_child1_child0.Style().SetMinHeight(0)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root_child2.Style().SetFlexShrink(1)
	root_child2.Style().SetFlexBasisPercent(0)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())
}

func TestDisplayNoneWithPosition(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetPosition(EdgeTop, 10)
	root_child1.Style().SetDisplay(DisplayNone)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGFlexWrapTest.html

func TestWrapColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(30)
	root_child0.Style().SetHeight(30)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(30)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(30)
	root_child2.Style().SetHeight(30)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(30)
	root_child3.Style().SetHeight(30)
	root.InsertChild(root_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 60, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 30, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 30, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 30, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 60, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 30, root_child3.Layout().Left())
	assert.EqualValues(t, 0, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 30, root_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 60, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 30, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 30, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 30, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 30, root_child1.Layout().Height())

	assert.EqualValues(t, 30, root_child2.Layout().Left())
	assert.EqualValues(t, 60, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 0, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 30, root_child3.Layout().Height())
}

func TestWrapRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(30)
	root_child0.Style().SetHeight(30)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(30)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(30)
	root_child2.Style().SetHeight(30)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(30)
	root_child3.Style().SetHeight(30)
	root.InsertChild(root_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 60, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 30, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 30, root_child1.Layout().Height())

	assert.EqualValues(t, 60, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 30, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 30, root_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 60, root.Layout().Height())

	assert.EqualValues(t, 70, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 30, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 30, root_child1.Layout().Height())

	assert.EqualValues(t, 10, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 70, root_child3.Layout().Left())
	assert.EqualValues(t, 30, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 30, root_child3.Layout().Height())
}

func TestWrapRowAlignItemsFlexEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignFlexEnd)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(30)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(30)
	root_child2.Style().SetHeight(30)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(30)
	root_child3.Style().SetHeight(30)
	root.InsertChild(root_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 60, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 20, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 60, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 30, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 30, root_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 60, root.Layout().Height())

	assert.EqualValues(t, 70, root_child0.Layout().Left())
	assert.EqualValues(t, 20, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 10, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 70, root_child3.Layout().Left())
	assert.EqualValues(t, 30, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 30, root_child3.Layout().Height())
}

func TestWrapRowAlignItemsCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(30)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(30)
	root_child2.Style().SetHeight(30)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(30)
	root_child3.Style().SetHeight(30)
	root.InsertChild(root_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 60, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 5, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 60, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 30, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 30, root_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 60, root.Layout().Height())

	assert.EqualValues(t, 70, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 5, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 10, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 70, root_child3.Layout().Left())
	assert.EqualValues(t, 30, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 30, root_child3.Layout().Height())
}

func TestFlexWrapChildrenWithMinMainOverridingFlexBasis(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexBasis(50)
	root_child0.Style().SetMinWidth(55)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexBasis(50)
	root_child1.Style().SetMinWidth(55)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 55, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 55, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 45, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 55, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 45, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 55, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestFlexWrapWrapToChildHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetAlignItems(AlignFlexStart)
	root_child0.Style().SetFlexWrap(WrapWrap)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(100)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetWidth(100)
	root_child0_child0_child0.Style().SetHeight(100)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(100)
	root_child1.Style().SetHeight(100)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 100, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 100, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())
}

func TestFlexWrapAlignStretchFitsOneRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())
}

func TestWrapReverseRowAlignContentFlexStart(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetFlexWrap(WrapReverse)
	root.Style().SetWidth(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(30)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(30)
	root_child2.Style().SetHeight(30)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(30)
	root_child3.Style().SetHeight(40)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(30)
	root_child4.Style().SetHeight(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 80, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 70, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 60, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 60, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 30, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 80, root.Layout().Height())

	assert.EqualValues(t, 70, root_child0.Layout().Left())
	assert.EqualValues(t, 70, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 60, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 10, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 70, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 40, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestWrapReverseRowAlignContentCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignCenter)
	root.Style().SetFlexWrap(WrapReverse)
	root.Style().SetWidth(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(30)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(30)
	root_child2.Style().SetHeight(30)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(30)
	root_child3.Style().SetHeight(40)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(30)
	root_child4.Style().SetHeight(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 80, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 70, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 60, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 60, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 30, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 80, root.Layout().Height())

	assert.EqualValues(t, 70, root_child0.Layout().Left())
	assert.EqualValues(t, 70, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 60, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 10, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 70, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 40, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestWrapReverseRowSingleLineDifferentSize(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetFlexWrap(WrapReverse)
	root.Style().SetWidth(300)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(30)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(30)
	root_child2.Style().SetHeight(30)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(30)
	root_child3.Style().SetHeight(40)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(30)
	root_child4.Style().SetHeight(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 300, root.Layout().Width())
	assert.EqualValues(t, 50, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 40, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 30, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 60, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 90, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 120, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 300, root.Layout().Width())
	assert.EqualValues(t, 50, root.Layout().Height())

	assert.EqualValues(t, 270, root_child0.Layout().Left())
	assert.EqualValues(t, 40, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 240, root_child1.Layout().Left())
	assert.EqualValues(t, 30, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 210, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 180, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 150, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestWrapReverseRowAlignContentStretch(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapReverse)
	root.Style().SetWidth(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(30)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(30)
	root_child2.Style().SetHeight(30)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(30)
	root_child3.Style().SetHeight(40)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(30)
	root_child4.Style().SetHeight(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 80, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 70, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 60, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 60, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 30, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 80, root.Layout().Height())

	assert.EqualValues(t, 70, root_child0.Layout().Left())
	assert.EqualValues(t, 70, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 60, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 10, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 70, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 40, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestWrapReverseRowAlignContentSpaceAround(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignSpaceAround)
	root.Style().SetFlexWrap(WrapReverse)
	root.Style().SetWidth(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(30)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(30)
	root_child2.Style().SetHeight(30)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(30)
	root_child3.Style().SetHeight(40)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(30)
	root_child4.Style().SetHeight(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 80, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 70, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 60, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 60, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 30, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 80, root.Layout().Height())

	assert.EqualValues(t, 70, root_child0.Layout().Left())
	assert.EqualValues(t, 70, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 60, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 10, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 70, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 40, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestWrapReverseColumnFixedSize(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetFlexWrap(WrapReverse)
	root.Style().SetWidth(200)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(30)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(30)
	root_child2.Style().SetHeight(30)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(30)
	root_child3.Style().SetHeight(40)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(30)
	root_child4.Style().SetHeight(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 170, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 170, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 170, root_child2.Layout().Left())
	assert.EqualValues(t, 30, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 170, root_child3.Layout().Left())
	assert.EqualValues(t, 60, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 140, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 30, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 30, root_child2.Layout().Top())
	assert.EqualValues(t, 30, root_child2.Layout().Width())
	assert.EqualValues(t, 30, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 60, root_child3.Layout().Top())
	assert.EqualValues(t, 30, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 30, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 30, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestWrappedRowWithinAlignItemsCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetFlexWrap(WrapWrap)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(150)
	root_child0_child0.Style().SetHeight(80)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child1.Free()
	root_child0_child1.Style().SetWidth(80)
	root_child0_child1.Style().SetHeight(80)
	root_child0.InsertChild(root_child0_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 160, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 150, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 160, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 150, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 120, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Height())
}

func TestWrappedRowWithinAlignItemsFlexStart(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignFlexStart)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetFlexWrap(WrapWrap)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(150)
	root_child0_child0.Style().SetHeight(80)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child1.Free()
	root_child0_child1.Style().SetWidth(80)
	root_child0_child1.Style().SetHeight(80)
	root_child0.InsertChild(root_child0_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 160, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 150, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 160, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 150, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 120, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Height())
}

func TestWrappedRowWithinAlignItemsFlexEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignFlexEnd)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetFlexWrap(WrapWrap)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(150)
	root_child0_child0.Style().SetHeight(80)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child1.Free()
	root_child0_child1.Style().SetWidth(80)
	root_child0_child1.Style().SetHeight(80)
	root_child0.InsertChild(root_child0_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 160, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 150, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 160, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 150, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 120, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 80, root_child0_child1.Layout().Height())
}

func TestWrappedColumnMaxHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignContent(AlignCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(700)
	root.Style().SetHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(100)
	root_child0.Style().SetHeight(500)
	root_child0.Style().SetMaxHeight(200)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetMargin(EdgeLeft, 20)
	root_child1.Style().SetMargin(EdgeTop, 20)
	root_child1.Style().SetMargin(EdgeRight, 20)
	root_child1.Style().SetMargin(EdgeBottom, 20)
	root_child1.Style().SetWidth(200)
	root_child1.Style().SetHeight(200)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(100)
	root_child2.Style().SetHeight(100)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 700, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 250, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 200, root_child1.Layout().Left())
	assert.EqualValues(t, 250, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 200, root_child1.Layout().Height())

	assert.EqualValues(t, 420, root_child2.Layout().Left())
	assert.EqualValues(t, 200, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 700, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 350, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 300, root_child1.Layout().Left())
	assert.EqualValues(t, 250, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 200, root_child1.Layout().Height())

	assert.EqualValues(t, 180, root_child2.Layout().Left())
	assert.EqualValues(t, 200, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())
}

func TestWrappedColumnMaxHeightFlex(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignContent(AlignCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(700)
	root.Style().SetHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexShrink(1)
	root_child0.Style().SetFlexBasisPercent(0)
	root_child0.Style().SetWidth(100)
	root_child0.Style().SetHeight(500)
	root_child0.Style().SetMaxHeight(200)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetFlexShrink(1)
	root_child1.Style().SetFlexBasisPercent(0)
	root_child1.Style().SetMargin(EdgeLeft, 20)
	root_child1.Style().SetMargin(EdgeTop, 20)
	root_child1.Style().SetMargin(EdgeRight, 20)
	root_child1.Style().SetMargin(EdgeBottom, 20)
	root_child1.Style().SetWidth(200)
	root_child1.Style().SetHeight(200)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(100)
	root_child2.Style().SetHeight(100)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 700, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 300, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 180, root_child0.Layout().Height())

	assert.EqualValues(t, 250, root_child1.Layout().Left())
	assert.EqualValues(t, 200, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 180, root_child1.Layout().Height())

	assert.EqualValues(t, 300, root_child2.Layout().Left())
	assert.EqualValues(t, 400, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 700, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 300, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 180, root_child0.Layout().Height())

	assert.EqualValues(t, 250, root_child1.Layout().Left())
	assert.EqualValues(t, 200, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 180, root_child1.Layout().Height())

	assert.EqualValues(t, 300, root_child2.Layout().Left())
	assert.EqualValues(t, 400, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())
}

func TestWrapNodesWithContentSizingOverflowingMargin(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(500)
	root.Style().SetHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetFlexWrap(WrapWrap)
	root_child0.Style().SetWidth(85)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetWidth(40)
	root_child0_child0_child0.Style().SetHeight(40)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)

	root_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child1.Free()
	root_child0_child1.Style().SetMargin(EdgeRight, 10)
	root_child0.InsertChild(root_child0_child1, 1)

	root_child0_child1_child0 := NewNodeWithConfig(config)
	defer root_child0_child1_child0.Free()
	root_child0_child1_child0.Style().SetWidth(40)
	root_child0_child1_child0.Style().SetHeight(40)
	root_child0_child1.InsertChild(root_child0_child1_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 85, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child1_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child1_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child1_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 415, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 85, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	assert.EqualValues(t, 45, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 35, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child1_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child1_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child1_child0.Layout().Height())
}

func TestWrapNodesWithContentSizingMarginCross(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(500)
	root.Style().SetHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetFlexWrap(WrapWrap)
	root_child0.Style().SetWidth(70)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetWidth(40)
	root_child0_child0_child0.Style().SetHeight(40)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)

	root_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child1.Free()
	root_child0_child1.Style().SetMargin(EdgeTop, 10)
	root_child0.InsertChild(root_child0_child1, 1)

	root_child0_child1_child0 := NewNodeWithConfig(config)
	defer root_child0_child1_child0.Free()
	root_child0_child1_child0.Style().SetWidth(40)
	root_child0_child1_child0.Style().SetHeight(40)
	root_child0_child1.InsertChild(root_child0_child1_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 70, root_child0.Layout().Width())
	assert.EqualValues(t, 90, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child1_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child1_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child1_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 430, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 70, root_child0.Layout().Width())
	assert.EqualValues(t, 90, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child0_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child0_child1.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child1.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child1_child0.Layout().Top())
	assert.EqualValues(t, 40, root_child0_child1_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0_child1_child0.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGAbsolutePositionTest.html

func TestAbsoluteLayoutWidthHeightStartTop(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPosition(EdgeStart, 10)
	root_child0.Style().SetPosition(EdgeTop, 10)
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestAbsoluteLayoutWidthHeightEndBottom(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPosition(EdgeEnd, 10)
	root_child0.Style().SetPosition(EdgeBottom, 10)
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 80, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 80, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestAbsoluteLayoutStartTopEndBottom(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPosition(EdgeStart, 10)
	root_child0.Style().SetPosition(EdgeTop, 10)
	root_child0.Style().SetPosition(EdgeEnd, 10)
	root_child0.Style().SetPosition(EdgeBottom, 10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())
}

func TestAbsoluteLayoutWidthHeightStartTopEndBottom(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPosition(EdgeStart, 10)
	root_child0.Style().SetPosition(EdgeTop, 10)
	root_child0.Style().SetPosition(EdgeEnd, 10)
	root_child0.Style().SetPosition(EdgeBottom, 10)
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestDoNotClampHeightOfAbsoluteNodeToHeightOfItsOverflowHiddenParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetOverflow(OverflowHidden)
	root.Style().SetWidth(50)
	root.Style().SetHeight(50)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPosition(EdgeStart, 0)
	root_child0.Style().SetPosition(EdgeTop, 0)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(100)
	root_child0_child0.Style().SetHeight(100)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 50, root.Layout().Width())
	assert.EqualValues(t, 50, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 50, root.Layout().Width())
	assert.EqualValues(t, 50, root.Layout().Height())

	assert.EqualValues(t, -50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Height())
}

func TestAbsoluteLayoutWithinBorder(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetMargin(EdgeLeft, 10)
	root.Style().SetMargin(EdgeTop, 10)
	root.Style().SetMargin(EdgeRight, 10)
	root.Style().SetMargin(EdgeBottom, 10)
	root.Style().SetPadding(EdgeLeft, 10)
	root.Style().SetPadding(EdgeTop, 10)
	root.Style().SetPadding(EdgeRight, 10)
	root.Style().SetPadding(EdgeBottom, 10)
	root.Style().SetBorder(EdgeLeft, 10)
	root.Style().SetBorder(EdgeTop, 10)
	root.Style().SetBorder(EdgeRight, 10)
	root.Style().SetBorder(EdgeBottom, 10)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPosition(EdgeLeft, 0)
	root_child0.Style().SetPosition(EdgeTop, 0)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetPositionType(PositionAbsolute)
	root_child1.Style().SetPosition(EdgeRight, 0)
	root_child1.Style().SetPosition(EdgeBottom, 0)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetPositionType(PositionAbsolute)
	root_child2.Style().SetPosition(EdgeLeft, 0)
	root_child2.Style().SetPosition(EdgeTop, 0)
	root_child2.Style().SetMargin(EdgeLeft, 10)
	root_child2.Style().SetMargin(EdgeTop, 10)
	root_child2.Style().SetMargin(EdgeRight, 10)
	root_child2.Style().SetMargin(EdgeBottom, 10)
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetPositionType(PositionAbsolute)
	root_child3.Style().SetPosition(EdgeRight, 0)
	root_child3.Style().SetPosition(EdgeBottom, 0)
	root_child3.Style().SetMargin(EdgeLeft, 10)
	root_child3.Style().SetMargin(EdgeTop, 10)
	root_child3.Style().SetMargin(EdgeRight, 10)
	root_child3.Style().SetMargin(EdgeBottom, 10)
	root_child3.Style().SetWidth(50)
	root_child3.Style().SetHeight(50)
	root.InsertChild(root_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 10, root.Layout().Left())
	assert.EqualValues(t, 10, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 20, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 30, root_child3.Layout().Left())
	assert.EqualValues(t, 30, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 10, root.Layout().Left())
	assert.EqualValues(t, 10, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 20, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 30, root_child3.Layout().Left())
	assert.EqualValues(t, 30, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetFlexGrow(1)
	root.Style().SetWidth(110)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(40)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentFlexEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyFlexEnd)
	root.Style().SetAlignItems(AlignFlexEnd)
	root.Style().SetFlexGrow(1)
	root.Style().SetWidth(110)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(40)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 60, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 60, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())
}

func TestAbsoluteLayoutJustifyContentCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetFlexGrow(1)
	root.Style().SetWidth(110)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(40)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())
}

func TestAbsoluteLayoutAlignItemsCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetFlexGrow(1)
	root.Style().SetWidth(110)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(40)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())
}

func TestAbsoluteLayoutAlignItemsCenterOnChildOnly(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexGrow(1)
	root.Style().SetWidth(110)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignSelf(AlignCenter)
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(40)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentCenterAndTopPosition(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetFlexGrow(1)
	root.Style().SetWidth(110)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPosition(EdgeTop, 10)
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(40)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentCenterAndBottomPosition(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetFlexGrow(1)
	root.Style().SetWidth(110)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPosition(EdgeBottom, 10)
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(40)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 50, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 50, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentCenterAndLeftPosition(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetFlexGrow(1)
	root.Style().SetWidth(110)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPosition(EdgeLeft, 5)
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(40)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 5, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 5, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentCenterAndRightPosition(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetFlexGrow(1)
	root.Style().SetWidth(110)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPosition(EdgeRight, 5)
	root_child0.Style().SetWidth(60)
	root_child0.Style().SetHeight(40)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 45, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 110, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 45, root_child0.Layout().Left())
	assert.EqualValues(t, 30, root_child0.Layout().Top())
	assert.EqualValues(t, 60, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())
}

func TestPositionRootWithRtlShouldPositionWithoutdirection(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetPosition(EdgeLeft, 72)
	root.Style().SetWidth(52)
	root.Style().SetHeight(52)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 72, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 72, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())
}

func TestAbsoluteLayoutPercentageBottomBasedOnParentHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetPositionPercent(EdgeTop, 50)
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetPositionType(PositionAbsolute)
	root_child1.Style().SetPositionPercent(EdgeBottom, 50)
	root_child1.Style().SetWidth(10)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetPositionType(PositionAbsolute)
	root_child2.Style().SetPositionPercent(EdgeTop, 10)
	root_child2.Style().SetPositionPercent(EdgeBottom, 10)
	root_child2.Style().SetWidth(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 100, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 90, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 160, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 100, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 90, root_child1.Layout().Left())
	assert.EqualValues(t, 90, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 90, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 160, root_child2.Layout().Height())
}

func TestAbsoluteLayoutInWrapReverseColumnContainer(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexWrap(WrapReverse)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetWidth(20)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())
}

func TestAbsoluteLayoutInWrapReverseRowContainer(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetFlexWrap(WrapReverse)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetWidth(20)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 80, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 80, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())
}

func TestAbsoluteLayoutInWrapReverseColumnContainerFlexEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexWrap(WrapReverse)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignSelf(AlignFlexEnd)
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetWidth(20)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())
}

func TestAbsoluteLayoutInWrapReverseRowContainerFlexEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetFlexWrap(WrapReverse)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignSelf(AlignFlexEnd)
	root_child0.Style().SetPositionType(PositionAbsolute)
	root_child0.Style().SetWidth(20)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGAlignItemsTest.html

func TestAlignItemsStretch(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestAlignItemsCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 45, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 45, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestAlignItemsFlexStart(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignFlexStart)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestAlignItemsFlexEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignFlexEnd)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestAlignBaseline(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 30, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 30, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())
}

func TestAlignBaselineChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(50)
	root_child1_child0.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())
}

func TestAlignBaselineChildMultiline(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexDirection(FlexDirectionRow)
	root_child1.Style().SetFlexWrap(WrapWrap)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(25)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(25)
	root_child1_child0.Style().SetHeight(20)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child1_child1 := NewNodeWithConfig(config)
	defer root_child1_child1.Free()
	root_child1_child1.Style().SetWidth(25)
	root_child1_child1.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child1, 1)

	root_child1_child2 := NewNodeWithConfig(config)
	defer root_child1_child2.Free()
	root_child1_child2.Style().SetWidth(25)
	root_child1_child2.Style().SetHeight(20)
	root_child1.InsertChild(root_child1_child2, 2)

	root_child1_child3 := NewNodeWithConfig(config)
	defer root_child1_child3.Free()
	root_child1_child3.Style().SetWidth(25)
	root_child1_child3.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child1.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child3.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child3.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child1.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child1.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child3.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child3.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child3.Layout().Height())
}

func TestAlignBaselineChildMultilineOverride(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexDirection(FlexDirectionRow)
	root_child1.Style().SetFlexWrap(WrapWrap)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(25)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(25)
	root_child1_child0.Style().SetHeight(20)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child1_child1 := NewNodeWithConfig(config)
	defer root_child1_child1.Free()
	root_child1_child1.Style().SetAlignSelf(AlignBaseline)
	root_child1_child1.Style().SetWidth(25)
	root_child1_child1.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child1, 1)

	root_child1_child2 := NewNodeWithConfig(config)
	defer root_child1_child2.Free()
	root_child1_child2.Style().SetWidth(25)
	root_child1_child2.Style().SetHeight(20)
	root_child1.InsertChild(root_child1_child2, 2)

	root_child1_child3 := NewNodeWithConfig(config)
	defer root_child1_child3.Free()
	root_child1_child3.Style().SetAlignSelf(AlignBaseline)
	root_child1_child3.Style().SetWidth(25)
	root_child1_child3.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child1.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child3.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child3.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child1.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child1.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child3.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child3.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child3.Layout().Height())
}

func TestAlignBaselineChildMultilineNoOverrideOnSecondline(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(60)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexDirection(FlexDirectionRow)
	root_child1.Style().SetFlexWrap(WrapWrap)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(25)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(25)
	root_child1_child0.Style().SetHeight(20)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child1_child1 := NewNodeWithConfig(config)
	defer root_child1_child1.Free()
	root_child1_child1.Style().SetWidth(25)
	root_child1_child1.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child1, 1)

	root_child1_child2 := NewNodeWithConfig(config)
	defer root_child1_child2.Free()
	root_child1_child2.Style().SetWidth(25)
	root_child1_child2.Style().SetHeight(20)
	root_child1.InsertChild(root_child1_child2, 2)

	root_child1_child3 := NewNodeWithConfig(config)
	defer root_child1_child3.Free()
	root_child1_child3.Style().SetAlignSelf(AlignBaseline)
	root_child1_child3.Style().SetWidth(25)
	root_child1_child3.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child1.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child3.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child3.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child1.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child1.Layout().Height())

	assert.EqualValues(t, 25, root_child1_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child3.Layout().Left())
	assert.EqualValues(t, 20, root_child1_child3.Layout().Top())
	assert.EqualValues(t, 25, root_child1_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child3.Layout().Height())
}

func TestAlignBaselineChildTop(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPosition(EdgeTop, 10)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(50)
	root_child1_child0.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())
}

func TestAlignBaselineChildTop2(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetPosition(EdgeTop, 5)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(50)
	root_child1_child0.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 45, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 45, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())
}

func TestAlignBaselineDoubleNestedChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(50)
	root_child0_child0.Style().SetHeight(20)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(50)
	root_child1_child0.Style().SetHeight(15)
	root_child1.InsertChild(root_child1_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 5, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 15, root_child1_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 5, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 15, root_child1_child0.Layout().Height())
}

func TestAlignBaselineColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())
}

func TestAlignBaselineChildMargin(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMargin(EdgeLeft, 5)
	root_child0.Style().SetMargin(EdgeTop, 5)
	root_child0.Style().SetMargin(EdgeRight, 5)
	root_child0.Style().SetMargin(EdgeBottom, 5)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetMargin(EdgeLeft, 1)
	root_child1_child0.Style().SetMargin(EdgeTop, 1)
	root_child1_child0.Style().SetMargin(EdgeRight, 1)
	root_child1_child0.Style().SetMargin(EdgeBottom, 1)
	root_child1_child0.Style().SetWidth(50)
	root_child1_child0.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 5, root_child0.Layout().Left())
	assert.EqualValues(t, 5, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 60, root_child1.Layout().Left())
	assert.EqualValues(t, 44, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 1, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 1, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 45, root_child0.Layout().Left())
	assert.EqualValues(t, 5, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, -10, root_child1.Layout().Left())
	assert.EqualValues(t, 44, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, -1, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 1, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())
}

func TestAlignBaselineChildPadding(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetPadding(EdgeLeft, 5)
	root.Style().SetPadding(EdgeTop, 5)
	root.Style().SetPadding(EdgeRight, 5)
	root.Style().SetPadding(EdgeBottom, 5)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetPadding(EdgeLeft, 5)
	root_child1.Style().SetPadding(EdgeTop, 5)
	root_child1.Style().SetPadding(EdgeRight, 5)
	root_child1.Style().SetPadding(EdgeBottom, 5)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(50)
	root_child1_child0.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 5, root_child0.Layout().Left())
	assert.EqualValues(t, 5, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 55, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 5, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 5, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 45, root_child0.Layout().Left())
	assert.EqualValues(t, 5, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, -5, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, -5, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 5, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())
}

func TestAlignBaselineMultiline(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(50)
	root_child1_child0.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(20)
	root.InsertChild(root_child2, 2)

	root_child2_child0 := NewNodeWithConfig(config)
	defer root_child2_child0.Free()
	root_child2_child0.Style().SetWidth(50)
	root_child2_child0.Style().SetHeight(10)
	root_child2.InsertChild(root_child2_child0, 0)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root_child3.Style().SetHeight(50)
	root.InsertChild(root_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 100, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child2_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child2_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child2_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 60, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 100, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child2_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child2_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child2_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 60, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())
}

func TestAlignBaselineMultilineColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(20)
	root_child1_child0.Style().SetHeight(20)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(40)
	root_child2.Style().SetHeight(70)
	root.InsertChild(root_child2, 2)

	root_child2_child0 := NewNodeWithConfig(config)
	defer root_child2_child0.Free()
	root_child2_child0.Style().SetWidth(10)
	root_child2_child0.Style().SetHeight(10)
	root_child2.InsertChild(root_child2_child0, 0)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root_child3.Style().SetHeight(20)
	root.InsertChild(root_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 40, root_child2.Layout().Width())
	assert.EqualValues(t, 70, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child2_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child2_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 70, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 20, root_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 70, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 10, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 40, root_child2.Layout().Width())
	assert.EqualValues(t, 70, root_child2.Layout().Height())

	assert.EqualValues(t, 30, root_child2_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child2_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 70, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 20, root_child3.Layout().Height())
}

func TestAlignBaselineMultilineColumn2(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(30)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(20)
	root_child1_child0.Style().SetHeight(20)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(40)
	root_child2.Style().SetHeight(70)
	root.InsertChild(root_child2, 2)

	root_child2_child0 := NewNodeWithConfig(config)
	defer root_child2_child0.Free()
	root_child2_child0.Style().SetWidth(10)
	root_child2_child0.Style().SetHeight(10)
	root_child2.InsertChild(root_child2_child0, 0)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root_child3.Style().SetHeight(20)
	root.InsertChild(root_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 40, root_child2.Layout().Width())
	assert.EqualValues(t, 70, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child2_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child2_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 70, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 20, root_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 70, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 30, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 10, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 40, root_child2.Layout().Width())
	assert.EqualValues(t, 70, root_child2.Layout().Height())

	assert.EqualValues(t, 30, root_child2_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child2_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 70, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 20, root_child3.Layout().Height())
}

func TestAlignBaselineMultilineRowAndColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignBaseline)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(50)
	root_child1_child0.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child0, 0)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(20)
	root.InsertChild(root_child2, 2)

	root_child2_child0 := NewNodeWithConfig(config)
	defer root_child2_child0.Free()
	root_child2_child0.Style().SetWidth(50)
	root_child2_child0.Style().SetHeight(10)
	root_child2.InsertChild(root_child2_child0, 0)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root_child3.Style().SetHeight(20)
	root.InsertChild(root_child3, 3)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 100, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child2_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child2_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child2_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 90, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 20, root_child3.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 100, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child2_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child2_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child2_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child2_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 90, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 20, root_child3.Layout().Height())
}

func TestAlignItemsCenterChildWithMarginBiggerThanParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(52)
	root.Style().SetHeight(52)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignItems(AlignCenter)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetMargin(EdgeLeft, 10)
	root_child0_child0.Style().SetMargin(EdgeRight, 10)
	root_child0_child0.Style().SetWidth(52)
	root_child0_child0.Style().SetHeight(52)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -10, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 52, root_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 52, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 52, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -10, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 52, root_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 52, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 52, root_child0_child0.Layout().Height())
}

func TestAlignItemsFlexEndChildWithMarginBiggerThanParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(52)
	root.Style().SetHeight(52)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignItems(AlignFlexEnd)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetMargin(EdgeLeft, 10)
	root_child0_child0.Style().SetMargin(EdgeRight, 10)
	root_child0_child0.Style().SetWidth(52)
	root_child0_child0.Style().SetHeight(52)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -10, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 52, root_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 52, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 52, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -10, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 52, root_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 52, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 52, root_child0_child0.Layout().Height())
}

func TestAlignItemsCenterChildWithoutMarginBiggerThanParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(52)
	root.Style().SetHeight(52)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignItems(AlignCenter)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(72)
	root_child0_child0.Style().SetHeight(72)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -10, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -10, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0_child0.Layout().Height())
}

func TestAlignItemsFlexEndChildWithoutMarginBiggerThanParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(52)
	root.Style().SetHeight(52)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignItems(AlignFlexEnd)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(72)
	root_child0_child0.Style().SetHeight(72)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -10, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -10, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0_child0.Layout().Height())
}

func TestAlignCenterShouldSizeBasedOnContent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetMargin(EdgeTop, 20)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetJustifyContent(JustifyCenter)
	root_child0.Style().SetFlexShrink(1)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexShrink(1)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetWidth(20)
	root_child0_child0_child0.Style().SetHeight(20)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 20, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 40, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 20, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 40, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0_child0.Layout().Height())
}

func TestAlignStrechShouldSizeBasedOnParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetMargin(EdgeTop, 20)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetJustifyContent(JustifyCenter)
	root_child0.Style().SetFlexShrink(1)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexShrink(1)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetWidth(20)
	root_child0_child0_child0.Style().SetHeight(20)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 20, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 20, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 80, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 20, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 20, root_child0_child0_child0.Layout().Height())
}

func TestAlignFlexStartWithShrinkingChildren(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(500)
	root.Style().SetHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignItems(AlignFlexStart)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexShrink(1)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0_child0.Style().SetFlexShrink(1)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 500, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Height())
}

func TestAlignFlexStartWithStretchingChildren(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(500)
	root.Style().SetHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexShrink(1)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0_child0.Style().SetFlexShrink(1)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Height())
}

func TestAlignFlexStartWithShrinkingChildrenWithStretch(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(500)
	root.Style().SetHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignItems(AlignFlexStart)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexShrink(1)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0_child0.Style().SetFlexShrink(1)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 500, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 500, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 500, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGSizeOverflowTest.html

func TestNestedOverflowingChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(200)
	root_child0_child0.Style().SetHeight(200)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, -100, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Height())
}

func TestNestedOverflowingChildInConstraintParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(100)
	root_child0.Style().SetHeight(100)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(200)
	root_child0_child0.Style().SetHeight(200)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, -100, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Height())
}

func TestParentWrapChildSizeOverflowingParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(100)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetWidth(100)
	root_child0_child0.Style().SetHeight(200)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 200, root_child0_child0.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGBorderTest.html

func TestBorderNoSize(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetBorder(EdgeLeft, 10)
	root.Style().SetBorder(EdgeTop, 10)
	root.Style().SetBorder(EdgeRight, 10)
	root.Style().SetBorder(EdgeBottom, 10)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 20, root.Layout().Width())
	assert.EqualValues(t, 20, root.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 20, root.Layout().Width())
	assert.EqualValues(t, 20, root.Layout().Height())
}

func TestBorderContainerMatchChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetBorder(EdgeLeft, 10)
	root.Style().SetBorder(EdgeTop, 10)
	root.Style().SetBorder(EdgeRight, 10)
	root.Style().SetBorder(EdgeBottom, 10)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 30, root.Layout().Width())
	assert.EqualValues(t, 30, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 30, root.Layout().Width())
	assert.EqualValues(t, 30, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestBorderFlexChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetBorder(EdgeLeft, 10)
	root.Style().SetBorder(EdgeTop, 10)
	root.Style().SetBorder(EdgeRight, 10)
	root.Style().SetBorder(EdgeBottom, 10)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())
}

func TestBorderStretchChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetBorder(EdgeLeft, 10)
	root.Style().SetBorder(EdgeTop, 10)
	root.Style().SetBorder(EdgeRight, 10)
	root.Style().SetBorder(EdgeBottom, 10)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestBorderCenterChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetBorder(EdgeStart, 10)
	root.Style().SetBorder(EdgeEnd, 20)
	root.Style().SetBorder(EdgeBottom, 20)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 40, root_child0.Layout().Left())
	assert.EqualValues(t, 35, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 35, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGPaddingTest.html

func TestPaddingNoSize(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetPadding(EdgeLeft, 10)
	root.Style().SetPadding(EdgeTop, 10)
	root.Style().SetPadding(EdgeRight, 10)
	root.Style().SetPadding(EdgeBottom, 10)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 20, root.Layout().Width())
	assert.EqualValues(t, 20, root.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 20, root.Layout().Width())
	assert.EqualValues(t, 20, root.Layout().Height())
}

func TestPaddingContainerMatchChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetPadding(EdgeLeft, 10)
	root.Style().SetPadding(EdgeTop, 10)
	root.Style().SetPadding(EdgeRight, 10)
	root.Style().SetPadding(EdgeBottom, 10)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 30, root.Layout().Width())
	assert.EqualValues(t, 30, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 30, root.Layout().Width())
	assert.EqualValues(t, 30, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestPaddingFlexChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetPadding(EdgeLeft, 10)
	root.Style().SetPadding(EdgeTop, 10)
	root.Style().SetPadding(EdgeRight, 10)
	root.Style().SetPadding(EdgeBottom, 10)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())
}

func TestPaddingStretchChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetPadding(EdgeLeft, 10)
	root.Style().SetPadding(EdgeTop, 10)
	root.Style().SetPadding(EdgeRight, 10)
	root.Style().SetPadding(EdgeBottom, 10)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestPaddingCenterChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetPadding(EdgeStart, 10)
	root.Style().SetPadding(EdgeEnd, 20)
	root.Style().SetPadding(EdgeBottom, 20)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 40, root_child0.Layout().Left())
	assert.EqualValues(t, 35, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 35, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestChildWithPaddingAlignEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyFlexEnd)
	root.Style().SetAlignItems(AlignFlexEnd)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetPadding(EdgeLeft, 20)
	root_child0.Style().SetPadding(EdgeTop, 20)
	root_child0.Style().SetPadding(EdgeRight, 20)
	root_child0.Style().SetPadding(EdgeBottom, 20)
	root_child0.Style().SetWidth(100)
	root_child0.Style().SetHeight(100)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 100, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 100, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGMarginTest.html

func TestMarginStart(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMargin(EdgeStart, 10)
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())
}

func TestMarginTop(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMargin(EdgeTop, 10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestMarginEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetJustifyContent(JustifyFlexEnd)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMargin(EdgeEnd, 10)
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())
}

func TestMarginBottom(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyFlexEnd)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMargin(EdgeBottom, 10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 80, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 80, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestMarginAndFlexRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMargin(EdgeStart, 10)
	root_child0.Style().SetMargin(EdgeEnd, 10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())
}

func TestMarginAndFlexColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMargin(EdgeTop, 10)
	root_child0.Style().SetMargin(EdgeBottom, 10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())
}

func TestMarginAndStretchRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMargin(EdgeTop, 10)
	root_child0.Style().SetMargin(EdgeBottom, 10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 10, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())
}

func TestMarginAndStretchColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMargin(EdgeStart, 10)
	root_child0.Style().SetMargin(EdgeEnd, 10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 80, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())
}

func TestMarginWithSiblingRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMargin(EdgeEnd, 10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 45, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 55, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 45, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 55, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 45, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 45, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())
}

func TestMarginWithSiblingColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetMargin(EdgeBottom, 10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 45, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 55, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 45, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 45, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 55, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 45, root_child1.Layout().Height())
}

func TestMarginAutoBottom(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeBottom)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoTop(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeTop)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 100, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 100, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoBottomAndTop(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeTop)
	root_child0.Style().SetMarginAuto(EdgeBottom)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 50, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 50, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoBottomAndTopJustifyCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeTop)
	root_child0.Style().SetMarginAuto(EdgeBottom)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 50, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 150, root_child0.Layout().Left())
	assert.EqualValues(t, 50, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 150, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoMutipleChildrenColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeTop)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetMarginAuto(EdgeTop)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(50)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 25, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 100, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 75, root_child2.Layout().Left())
	assert.EqualValues(t, 150, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 25, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 100, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 75, root_child2.Layout().Left())
	assert.EqualValues(t, 150, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())
}

func TestMarginAutoMutipleChildrenRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeRight)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetMarginAuto(EdgeRight)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(50)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 75, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 75, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 150, root_child2.Layout().Left())
	assert.EqualValues(t, 75, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 125, root_child0.Layout().Left())
	assert.EqualValues(t, 75, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 75, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 75, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())
}

func TestMarginAutoLeftAndRightColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeLeft)
	root_child0.Style().SetMarginAuto(EdgeRight)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 75, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 150, root_child1.Layout().Left())
	assert.EqualValues(t, 75, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 75, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 75, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoLeftAndRight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeLeft)
	root_child0.Style().SetMarginAuto(EdgeRight)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 150, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoStartAndEndColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeStart)
	root_child0.Style().SetMarginAuto(EdgeEnd)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 75, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 150, root_child1.Layout().Left())
	assert.EqualValues(t, 75, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 75, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 75, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoStartAndEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeStart)
	root_child0.Style().SetMarginAuto(EdgeEnd)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 150, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoLeftAndRightColumnAndCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeLeft)
	root_child0.Style().SetMarginAuto(EdgeRight)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 75, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoLeft(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeLeft)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 150, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 150, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoRight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeRight)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoLeftAndRightStrech(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeLeft)
	root_child0.Style().SetMarginAuto(EdgeRight)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 150, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoTopAndBottomStrech(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeTop)
	root_child0.Style().SetMarginAuto(EdgeBottom)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 50, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 150, root_child0.Layout().Left())
	assert.EqualValues(t, 50, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 150, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginShouldNotBePartOfMaxHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(250)
	root.Style().SetHeight(250)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMargin(EdgeTop, 20)
	root_child0.Style().SetWidth(100)
	root_child0.Style().SetHeight(100)
	root_child0.Style().SetMaxHeight(100)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 250, root.Layout().Width())
	assert.EqualValues(t, 250, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 20, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 250, root.Layout().Width())
	assert.EqualValues(t, 250, root.Layout().Height())

	assert.EqualValues(t, 150, root_child0.Layout().Left())
	assert.EqualValues(t, 20, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())
}

func TestMarginShouldNotBePartOfMaxWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(250)
	root.Style().SetHeight(250)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMargin(EdgeLeft, 20)
	root_child0.Style().SetWidth(100)
	root_child0.Style().SetMaxWidth(100)
	root_child0.Style().SetHeight(100)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 250, root.Layout().Width())
	assert.EqualValues(t, 250, root.Layout().Height())

	assert.EqualValues(t, 20, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 250, root.Layout().Width())
	assert.EqualValues(t, 250, root.Layout().Height())

	assert.EqualValues(t, 150, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())
}

func TestMarginAutoLeftRightChildBiggerThanParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetWidth(52)
	root.Style().SetHeight(52)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeLeft)
	root_child0.Style().SetMarginAuto(EdgeRight)
	root_child0.Style().SetWidth(72)
	root_child0.Style().SetHeight(72)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -20, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())
}

func TestMarginAutoLeftChildBiggerThanParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetWidth(52)
	root.Style().SetHeight(52)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeLeft)
	root_child0.Style().SetWidth(72)
	root_child0.Style().SetHeight(72)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -20, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())
}

func TestMarginFixLeftAutoRightChildBiggerThanParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetWidth(52)
	root.Style().SetHeight(52)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMargin(EdgeLeft, 10)
	root_child0.Style().SetMarginAuto(EdgeRight)
	root_child0.Style().SetWidth(72)
	root_child0.Style().SetHeight(72)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, 10, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -20, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())
}

func TestMarginAutoLeftFixRightChildBiggerThanParent(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetJustifyContent(JustifyCenter)
	root.Style().SetWidth(52)
	root.Style().SetHeight(52)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetMarginAuto(EdgeLeft)
	root_child0.Style().SetMargin(EdgeRight, 10)
	root_child0.Style().SetWidth(72)
	root_child0.Style().SetHeight(72)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 52, root.Layout().Width())
	assert.EqualValues(t, 52, root.Layout().Height())

	assert.EqualValues(t, -30, root_child0.Layout().Left())
	assert.EqualValues(t, -10, root_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0.Layout().Height())
}

func TestMarginAutoTopStretchingChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexShrink(1)
	root_child0.Style().SetFlexBasisPercent(0)
	root_child0.Style().SetMarginAuto(EdgeTop)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 150, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 150, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestMarginAutoLeftStretchingChild(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignCenter)
	root.Style().SetWidth(200)
	root.Style().SetHeight(200)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexShrink(1)
	root_child0.Style().SetFlexBasisPercent(0)
	root_child0.Style().SetMarginAuto(EdgeLeft)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 200, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 150, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 200, root.Layout().Height())

	assert.EqualValues(t, 200, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0.Layout().Width())
	assert.EqualValues(t, 150, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 150, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGAndroidNewsFeed.html

func TestAndroidNewsFeed(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetWidth(1080)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0.Free()
	root_child0_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0.InsertChild(root_child0_child0_child0, 0)

	root_child0_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0_child0.Free()
	root_child0_child0_child0_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child0_child0.Style().SetAlignItems(AlignFlexStart)
	root_child0_child0_child0_child0.Style().SetMargin(EdgeStart, 36)
	root_child0_child0_child0_child0.Style().SetMargin(EdgeTop, 24)
	root_child0_child0_child0.InsertChild(root_child0_child0_child0_child0, 0)

	root_child0_child0_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0_child0_child0.Free()
	root_child0_child0_child0_child0_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0_child0_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child0_child0.InsertChild(root_child0_child0_child0_child0_child0, 0)

	root_child0_child0_child0_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0_child0_child0_child0.Free()
	root_child0_child0_child0_child0_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child0_child0_child0_child0.Style().SetWidth(120)
	root_child0_child0_child0_child0_child0_child0.Style().SetHeight(120)
	root_child0_child0_child0_child0_child0.InsertChild(root_child0_child0_child0_child0_child0_child0, 0)

	root_child0_child0_child0_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child0_child0_child0_child1.Free()
	root_child0_child0_child0_child0_child1.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child0_child0_child1.Style().SetFlexShrink(1)
	root_child0_child0_child0_child0_child1.Style().SetMargin(EdgeRight, 36)
	root_child0_child0_child0_child0_child1.Style().SetPadding(EdgeLeft, 36)
	root_child0_child0_child0_child0_child1.Style().SetPadding(EdgeTop, 21)
	root_child0_child0_child0_child0_child1.Style().SetPadding(EdgeRight, 36)
	root_child0_child0_child0_child0_child1.Style().SetPadding(EdgeBottom, 18)
	root_child0_child0_child0_child0.InsertChild(root_child0_child0_child0_child0_child1, 1)

	root_child0_child0_child0_child0_child1_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child0_child0_child1_child0.Free()
	root_child0_child0_child0_child0_child1_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0_child0_child0_child1_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child0_child0_child1_child0.Style().SetFlexShrink(1)
	root_child0_child0_child0_child0_child1.InsertChild(root_child0_child0_child0_child0_child1_child0, 0)

	root_child0_child0_child0_child0_child1_child1 := NewNodeWithConfig(config)
	defer root_child0_child0_child0_child0_child1_child1.Free()
	root_child0_child0_child0_child0_child1_child1.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child0_child0_child1_child1.Style().SetFlexShrink(1)
	root_child0_child0_child0_child0_child1.InsertChild(root_child0_child0_child0_child0_child1_child1, 1)

	root_child0_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child0_child1.Free()
	root_child0_child0_child1.Style().SetAlignContent(AlignStretch)
	root_child0_child0.InsertChild(root_child0_child0_child1, 1)

	root_child0_child0_child1_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child1_child0.Free()
	root_child0_child0_child1_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0_child1_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child1_child0.Style().SetAlignItems(AlignFlexStart)
	root_child0_child0_child1_child0.Style().SetMargin(EdgeStart, 174)
	root_child0_child0_child1_child0.Style().SetMargin(EdgeTop, 24)
	root_child0_child0_child1.InsertChild(root_child0_child0_child1_child0, 0)

	root_child0_child0_child1_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child1_child0_child0.Free()
	root_child0_child0_child1_child0_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0_child1_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child1_child0.InsertChild(root_child0_child0_child1_child0_child0, 0)

	root_child0_child0_child1_child0_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child1_child0_child0_child0.Free()
	root_child0_child0_child1_child0_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child1_child0_child0_child0.Style().SetWidth(72)
	root_child0_child0_child1_child0_child0_child0.Style().SetHeight(72)
	root_child0_child0_child1_child0_child0.InsertChild(root_child0_child0_child1_child0_child0_child0, 0)

	root_child0_child0_child1_child0_child1 := NewNodeWithConfig(config)
	defer root_child0_child0_child1_child0_child1.Free()
	root_child0_child0_child1_child0_child1.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child1_child0_child1.Style().SetFlexShrink(1)
	root_child0_child0_child1_child0_child1.Style().SetMargin(EdgeRight, 36)
	root_child0_child0_child1_child0_child1.Style().SetPadding(EdgeLeft, 36)
	root_child0_child0_child1_child0_child1.Style().SetPadding(EdgeTop, 21)
	root_child0_child0_child1_child0_child1.Style().SetPadding(EdgeRight, 36)
	root_child0_child0_child1_child0_child1.Style().SetPadding(EdgeBottom, 18)
	root_child0_child0_child1_child0.InsertChild(root_child0_child0_child1_child0_child1, 1)

	root_child0_child0_child1_child0_child1_child0 := NewNodeWithConfig(config)
	defer root_child0_child0_child1_child0_child1_child0.Free()
	root_child0_child0_child1_child0_child1_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0_child0_child1_child0_child1_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child1_child0_child1_child0.Style().SetFlexShrink(1)
	root_child0_child0_child1_child0_child1.InsertChild(root_child0_child0_child1_child0_child1_child0, 0)

	root_child0_child0_child1_child0_child1_child1 := NewNodeWithConfig(config)
	defer root_child0_child0_child1_child0_child1_child1.Free()
	root_child0_child0_child1_child0_child1_child1.Style().SetAlignContent(AlignStretch)
	root_child0_child0_child1_child0_child1_child1.Style().SetFlexShrink(1)
	root_child0_child0_child1_child0_child1.InsertChild(root_child0_child0_child1_child0_child1_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 1080, root.Layout().Width())
	assert.EqualValues(t, 240, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 1080, root_child0.Layout().Width())
	assert.EqualValues(t, 240, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 1080, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 240, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 1080, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 144, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 36, root_child0_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 24, root_child0_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 1044, root_child0_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 120, root_child0_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 120, root_child0_child0_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 120, root_child0_child0_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 120, root_child0_child0_child0_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 120, root_child0_child0_child0_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 120, root_child0_child0_child0_child0_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child1.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0_child0_child0_child1.Layout().Width())
	assert.EqualValues(t, 39, root_child0_child0_child0_child0_child1.Layout().Height())

	assert.EqualValues(t, 36, root_child0_child0_child0_child0_child1_child0.Layout().Left())
	assert.EqualValues(t, 21, root_child0_child0_child0_child0_child1_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child1_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child1_child0.Layout().Height())

	assert.EqualValues(t, 36, root_child0_child0_child0_child0_child1_child1.Layout().Left())
	assert.EqualValues(t, 21, root_child0_child0_child0_child0_child1_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child1_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child1_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child1.Layout().Left())
	assert.EqualValues(t, 144, root_child0_child0_child1.Layout().Top())
	assert.EqualValues(t, 1080, root_child0_child0_child1.Layout().Width())
	assert.EqualValues(t, 96, root_child0_child0_child1.Layout().Height())

	assert.EqualValues(t, 174, root_child0_child0_child1_child0.Layout().Left())
	assert.EqualValues(t, 24, root_child0_child0_child1_child0.Layout().Top())
	assert.EqualValues(t, 906, root_child0_child0_child1_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child1.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child1.Layout().Width())
	assert.EqualValues(t, 39, root_child0_child0_child1_child0_child1.Layout().Height())

	assert.EqualValues(t, 36, root_child0_child0_child1_child0_child1_child0.Layout().Left())
	assert.EqualValues(t, 21, root_child0_child0_child1_child0_child1_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child1_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child1_child0.Layout().Height())

	assert.EqualValues(t, 36, root_child0_child0_child1_child0_child1_child1.Layout().Left())
	assert.EqualValues(t, 21, root_child0_child0_child1_child0_child1_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child1_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child1_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 1080, root.Layout().Width())
	assert.EqualValues(t, 240, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 1080, root_child0.Layout().Width())
	assert.EqualValues(t, 240, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 1080, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 240, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 1080, root_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 144, root_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 24, root_child0_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 1044, root_child0_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 120, root_child0_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 924, root_child0_child0_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 120, root_child0_child0_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 120, root_child0_child0_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 120, root_child0_child0_child0_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 120, root_child0_child0_child0_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 816, root_child0_child0_child0_child0_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child1.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0_child0_child0_child1.Layout().Width())
	assert.EqualValues(t, 39, root_child0_child0_child0_child0_child1.Layout().Height())

	assert.EqualValues(t, 36, root_child0_child0_child0_child0_child1_child0.Layout().Left())
	assert.EqualValues(t, 21, root_child0_child0_child0_child0_child1_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child1_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child1_child0.Layout().Height())

	assert.EqualValues(t, 36, root_child0_child0_child0_child0_child1_child1.Layout().Left())
	assert.EqualValues(t, 21, root_child0_child0_child0_child0_child1_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child1_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child0_child0_child1_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child1.Layout().Left())
	assert.EqualValues(t, 144, root_child0_child0_child1.Layout().Top())
	assert.EqualValues(t, 1080, root_child0_child0_child1.Layout().Width())
	assert.EqualValues(t, 96, root_child0_child0_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child1_child0.Layout().Left())
	assert.EqualValues(t, 24, root_child0_child0_child1_child0.Layout().Top())
	assert.EqualValues(t, 906, root_child0_child0_child1_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0.Layout().Height())

	assert.EqualValues(t, 834, root_child0_child0_child1_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child0_child0.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child0_child0.Layout().Width())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child0_child0.Layout().Height())

	assert.EqualValues(t, 726, root_child0_child0_child1_child0_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child1.Layout().Top())
	assert.EqualValues(t, 72, root_child0_child0_child1_child0_child1.Layout().Width())
	assert.EqualValues(t, 39, root_child0_child0_child1_child0_child1.Layout().Height())

	assert.EqualValues(t, 36, root_child0_child0_child1_child0_child1_child0.Layout().Left())
	assert.EqualValues(t, 21, root_child0_child0_child1_child0_child1_child0.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child1_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child1_child0.Layout().Height())

	assert.EqualValues(t, 36, root_child0_child0_child1_child0_child1_child1.Layout().Left())
	assert.EqualValues(t, 21, root_child0_child0_child1_child0_child1_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child1_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0_child1_child0_child1_child1.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGAlignSelfTest.html

func TestAlignSelfCenter(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignSelf(AlignCenter)
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 45, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 45, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestAlignSelfFlexEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignSelf(AlignFlexEnd)
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestAlignSelfFlexStart(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignSelf(AlignFlexStart)
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestAlignSelfFlexEndOverrideFlexStart(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignItems(AlignFlexStart)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignSelf(AlignFlexEnd)
	root_child0.Style().SetWidth(10)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())
}

func TestAlignSelfBaseline(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetAlignSelf(AlignBaseline)
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetAlignSelf(AlignBaseline)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(20)
	root.InsertChild(root_child1, 1)

	root_child1_child0 := NewNodeWithConfig(config)
	defer root_child1_child0.Free()
	root_child1_child0.Style().SetWidth(50)
	root_child1_child0.Style().SetHeight(10)
	root_child1.InsertChild(root_child1_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child1_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child1_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child1_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child1_child0.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGFlexTest.html

func TestFlexBasisFlexGrowColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 75, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 75, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 75, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 75, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 25, root_child1.Layout().Height())
}

func TestFlexBasisFlexGrowRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 75, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 75, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 25, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 25, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 75, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 25, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())
}

func TestFlexBasisFlexShrinkColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexShrink(1)
	root_child0.Style().SetFlexBasis(100)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexBasis(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())
}

func TestFlexBasisFlexShrinkRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexShrink(1)
	root_child0.Style().SetFlexBasis(100)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexBasis(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())
}

func TestFlexShrinkToZero(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetHeight(75)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexShrink(1)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(50)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 50, root.Layout().Width())
	assert.EqualValues(t, 75, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 50, root.Layout().Width())
	assert.EqualValues(t, 75, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())
}

func TestFlexBasisOverridesMainSize(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasis(50)
	root_child0.Style().SetHeight(20)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(1)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 60, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 80, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 60, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 60, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 80, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 20, root_child2.Layout().Height())
}

func TestFlexGrowShrinkAtMost(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexShrink(1)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Height())
}

func TestFlexGrowLessThanFactorOne(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(200)
	root.Style().SetHeight(500)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(0.2)
	root_child0.Style().SetFlexBasis(40)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(0.2)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetFlexGrow(0.4)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 132, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 132, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 92, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 224, root_child2.Layout().Top())
	assert.EqualValues(t, 200, root_child2.Layout().Width())
	assert.EqualValues(t, 184, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 200, root.Layout().Width())
	assert.EqualValues(t, 500, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 200, root_child0.Layout().Width())
	assert.EqualValues(t, 132, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 132, root_child1.Layout().Top())
	assert.EqualValues(t, 200, root_child1.Layout().Width())
	assert.EqualValues(t, 92, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 224, root_child2.Layout().Top())
	assert.EqualValues(t, 200, root_child2.Layout().Width())
	assert.EqualValues(t, 184, root_child2.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGFlexDirectionTest.html

func TestFlexDirectionColumnNoHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 30, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 30, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestFlexDirectionRowNoWidth(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 30, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 20, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 30, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 20, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())
}

func TestFlexDirectionColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestFlexDirectionRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 20, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 80, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 70, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())
}

func TestFlexDirectionColumnReverse(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionColumnReverse)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 90, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 80, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 70, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 90, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 80, root_child1.Layout().Top())
	assert.EqualValues(t, 100, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 70, root_child2.Layout().Top())
	assert.EqualValues(t, 100, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())
}

func TestFlexDirectionRowReverse(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRowReverse)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(10)
	root.InsertChild(root_child2, 2)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 80, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 70, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 10, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 10, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 20, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 10, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/YGAlignContentTest.html

func TestAlignContentFlexStart(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(130)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root_child3.Style().SetHeight(10)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root_child4.Style().SetHeight(10)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 130, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 10, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 20, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 10, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 130, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 80, root_child2.Layout().Left())
	assert.EqualValues(t, 10, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	assert.EqualValues(t, 30, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 80, root_child4.Layout().Left())
	assert.EqualValues(t, 20, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 10, root_child4.Layout().Height())
}

func TestAlignContentFlexStartWithoutHeightOnChildren(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root_child3.Style().SetHeight(10)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 10, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 0, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 20, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 0, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 10, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 0, root_child2.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 10, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 20, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 0, root_child4.Layout().Height())
}

func TestAlignContentFlexStartWithFlex(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)
	root.Style().SetHeight(120)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexGrow(1)
	root_child0.Style().SetFlexBasisPercent(0)
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetFlexBasisPercent(0)
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetFlexGrow(1)
	root_child3.Style().SetFlexShrink(1)
	root_child3.Style().SetFlexBasisPercent(0)
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 120, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 40, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 80, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 0, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 80, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 120, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 0, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 120, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 40, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 40, root_child1.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 80, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 0, root_child2.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 80, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 40, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 120, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 0, root_child4.Layout().Height())
}

func TestAlignContentFlexEnd(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignContent(AlignFlexEnd)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root_child3.Style().SetHeight(10)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root_child4.Style().SetHeight(10)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 30, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 40, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 10, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 20, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 30, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 40, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 10, root_child4.Layout().Height())
}

func TestAlignContentStretch(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 0, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 0, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 0, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 0, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 0, root_child0.Layout().Height())

	assert.EqualValues(t, 100, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	assert.EqualValues(t, 100, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 0, root_child2.Layout().Height())

	assert.EqualValues(t, 100, root_child3.Layout().Left())
	assert.EqualValues(t, 0, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 0, root_child3.Layout().Height())

	assert.EqualValues(t, 100, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 0, root_child4.Layout().Height())
}

func TestAlignContentSpacebetween(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignSpaceBetween)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(130)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root_child3.Style().SetHeight(10)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root_child4.Style().SetHeight(10)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 130, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 45, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 45, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 90, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 10, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 130, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 80, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 30, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 80, root_child2.Layout().Left())
	assert.EqualValues(t, 45, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	assert.EqualValues(t, 30, root_child3.Layout().Left())
	assert.EqualValues(t, 45, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 80, root_child4.Layout().Left())
	assert.EqualValues(t, 90, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 10, root_child4.Layout().Height())
}

func TestAlignContentSpacearound(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignSpaceAround)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(140)
	root.Style().SetHeight(120)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root_child0.Style().SetHeight(10)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(10)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root_child2.Style().SetHeight(10)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root_child3.Style().SetHeight(10)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root_child4.Style().SetHeight(10)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 140, root.Layout().Width())
	assert.EqualValues(t, 120, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 15, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 15, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 55, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 55, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 95, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 10, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 140, root.Layout().Width())
	assert.EqualValues(t, 120, root.Layout().Height())

	assert.EqualValues(t, 90, root_child0.Layout().Left())
	assert.EqualValues(t, 15, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 15, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 10, root_child1.Layout().Height())

	assert.EqualValues(t, 90, root_child2.Layout().Left())
	assert.EqualValues(t, 55, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 10, root_child2.Layout().Height())

	assert.EqualValues(t, 40, root_child3.Layout().Left())
	assert.EqualValues(t, 55, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 90, root_child4.Layout().Left())
	assert.EqualValues(t, 95, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 10, root_child4.Layout().Height())
}

func TestAlignContentStretchRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 100, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 50, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 50, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 100, root_child3.Layout().Left())
	assert.EqualValues(t, 50, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 50, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestAlignContentStretchRowWithChildren(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexShrink(1)
	root_child0_child0.Style().SetFlexBasisPercent(0)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 100, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 50, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 50, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 100, root_child3.Layout().Left())
	assert.EqualValues(t, 50, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 50, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestAlignContentStretchRowWithFlex(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetFlexShrink(1)
	root_child1.Style().SetFlexBasisPercent(0)
	root_child1.Style().SetWidth(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetFlexGrow(1)
	root_child3.Style().SetFlexShrink(1)
	root_child3.Style().SetFlexBasisPercent(0)
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	assert.EqualValues(t, 100, root_child3.Layout().Left())
	assert.EqualValues(t, 0, root_child3.Layout().Top())
	assert.EqualValues(t, 0, root_child3.Layout().Width())
	assert.EqualValues(t, 100, root_child3.Layout().Height())

	assert.EqualValues(t, 100, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 100, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 100, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 0, root_child3.Layout().Top())
	assert.EqualValues(t, 0, root_child3.Layout().Width())
	assert.EqualValues(t, 100, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 100, root_child4.Layout().Height())
}

func TestAlignContentStretchRowWithFlexNoShrink(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetFlexShrink(1)
	root_child1.Style().SetFlexBasisPercent(0)
	root_child1.Style().SetWidth(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetFlexGrow(1)
	root_child3.Style().SetFlexBasisPercent(0)
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	assert.EqualValues(t, 100, root_child3.Layout().Left())
	assert.EqualValues(t, 0, root_child3.Layout().Top())
	assert.EqualValues(t, 0, root_child3.Layout().Width())
	assert.EqualValues(t, 100, root_child3.Layout().Height())

	assert.EqualValues(t, 100, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 100, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 100, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 0, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 100, root_child2.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 0, root_child3.Layout().Top())
	assert.EqualValues(t, 0, root_child3.Layout().Width())
	assert.EqualValues(t, 100, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 100, root_child4.Layout().Height())
}

func TestAlignContentStretchRowWithMargin(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetMargin(EdgeLeft, 10)
	root_child1.Style().SetMargin(EdgeTop, 10)
	root_child1.Style().SetMargin(EdgeRight, 10)
	root_child1.Style().SetMargin(EdgeBottom, 10)
	root_child1.Style().SetWidth(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetMargin(EdgeLeft, 10)
	root_child3.Style().SetMargin(EdgeTop, 10)
	root_child3.Style().SetMargin(EdgeRight, 10)
	root_child3.Style().SetMargin(EdgeBottom, 10)
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	assert.EqualValues(t, 60, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 40, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 40, root_child2.Layout().Height())

	assert.EqualValues(t, 60, root_child3.Layout().Left())
	assert.EqualValues(t, 50, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 20, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 80, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 20, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 40, root_child0.Layout().Height())

	assert.EqualValues(t, 40, root_child1.Layout().Left())
	assert.EqualValues(t, 10, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 100, root_child2.Layout().Left())
	assert.EqualValues(t, 40, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 40, root_child2.Layout().Height())

	assert.EqualValues(t, 40, root_child3.Layout().Left())
	assert.EqualValues(t, 50, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 20, root_child3.Layout().Height())

	assert.EqualValues(t, 100, root_child4.Layout().Left())
	assert.EqualValues(t, 80, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 20, root_child4.Layout().Height())
}

func TestAlignContentStretchRowWithPadding(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetPadding(EdgeLeft, 10)
	root_child1.Style().SetPadding(EdgeTop, 10)
	root_child1.Style().SetPadding(EdgeRight, 10)
	root_child1.Style().SetPadding(EdgeBottom, 10)
	root_child1.Style().SetWidth(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetPadding(EdgeLeft, 10)
	root_child3.Style().SetPadding(EdgeTop, 10)
	root_child3.Style().SetPadding(EdgeRight, 10)
	root_child3.Style().SetPadding(EdgeBottom, 10)
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 100, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 50, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 50, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 50, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 100, root_child3.Layout().Left())
	assert.EqualValues(t, 50, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 50, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestAlignContentStretchRowWithSingleRow(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root.InsertChild(root_child1, 1)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 100, root_child1.Layout().Height())
}

func TestAlignContentStretchRowWithFixedHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetHeight(60)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 60, root_child1.Layout().Height())

	assert.EqualValues(t, 100, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 80, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 80, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 20, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 80, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 20, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 80, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 60, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 80, root_child2.Layout().Height())

	assert.EqualValues(t, 100, root_child3.Layout().Left())
	assert.EqualValues(t, 80, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 20, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 80, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 20, root_child4.Layout().Height())
}

func TestAlignContentStretchRowWithMaxHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetMaxHeight(20)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 100, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 50, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 50, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 20, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 100, root_child3.Layout().Left())
	assert.EqualValues(t, 50, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 50, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestAlignContentStretchRowWithMinHeight(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetFlexDirection(FlexDirectionRow)
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(150)
	root.Style().SetHeight(100)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetWidth(50)
	root.InsertChild(root_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetWidth(50)
	root_child1.Style().SetMinHeight(80)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetWidth(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetWidth(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetWidth(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 90, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 90, root_child1.Layout().Height())

	assert.EqualValues(t, 100, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 90, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 90, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 90, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 10, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 150, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 100, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 90, root_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 0, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 90, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 0, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 90, root_child2.Layout().Height())

	assert.EqualValues(t, 100, root_child3.Layout().Left())
	assert.EqualValues(t, 90, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 10, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 90, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 10, root_child4.Layout().Height())
}

func TestAlignContentStretchColumn(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignContent(AlignStretch)
	root.Style().SetFlexWrap(WrapWrap)
	root.Style().SetWidth(100)
	root.Style().SetHeight(150)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetHeight(50)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetFlexGrow(1)
	root_child0_child0.Style().SetFlexShrink(1)
	root_child0_child0.Style().SetFlexBasisPercent(0)
	root_child0.InsertChild(root_child0_child0, 0)

	root_child1 := NewNodeWithConfig(config)
	defer root_child1.Free()
	root_child1.Style().SetFlexGrow(1)
	root_child1.Style().SetFlexShrink(1)
	root_child1.Style().SetFlexBasisPercent(0)
	root_child1.Style().SetHeight(50)
	root.InsertChild(root_child1, 1)

	root_child2 := NewNodeWithConfig(config)
	defer root_child2.Free()
	root_child2.Style().SetHeight(50)
	root.InsertChild(root_child2, 2)

	root_child3 := NewNodeWithConfig(config)
	defer root_child3.Free()
	root_child3.Style().SetHeight(50)
	root.InsertChild(root_child3, 3)

	root_child4 := NewNodeWithConfig(config)
	defer root_child4.Free()
	root_child4.Style().SetHeight(50)
	root.InsertChild(root_child4, 4)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 150, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	assert.EqualValues(t, 0, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 0, root_child3.Layout().Left())
	assert.EqualValues(t, 100, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	assert.EqualValues(t, 50, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 150, root.Layout().Height())

	assert.EqualValues(t, 50, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 50, root_child0_child0.Layout().Height())

	assert.EqualValues(t, 50, root_child1.Layout().Left())
	assert.EqualValues(t, 50, root_child1.Layout().Top())
	assert.EqualValues(t, 50, root_child1.Layout().Width())
	assert.EqualValues(t, 0, root_child1.Layout().Height())

	assert.EqualValues(t, 50, root_child2.Layout().Left())
	assert.EqualValues(t, 50, root_child2.Layout().Top())
	assert.EqualValues(t, 50, root_child2.Layout().Width())
	assert.EqualValues(t, 50, root_child2.Layout().Height())

	assert.EqualValues(t, 50, root_child3.Layout().Left())
	assert.EqualValues(t, 100, root_child3.Layout().Top())
	assert.EqualValues(t, 50, root_child3.Layout().Width())
	assert.EqualValues(t, 50, root_child3.Layout().Height())

	assert.EqualValues(t, 0, root_child4.Layout().Left())
	assert.EqualValues(t, 0, root_child4.Layout().Top())
	assert.EqualValues(t, 50, root_child4.Layout().Width())
	assert.EqualValues(t, 50, root_child4.Layout().Height())
}

func TestAlignContentStretchIsNotOverridingAlignItems(t *testing.T) {
	config := NewConfig()
	defer config.Free()

	root := NewNodeWithConfig(config)
	defer root.Free()
	root.Style().SetAlignContent(AlignStretch)

	root_child0 := NewNodeWithConfig(config)
	defer root_child0.Free()
	root_child0.Style().SetFlexDirection(FlexDirectionRow)
	root_child0.Style().SetAlignContent(AlignStretch)
	root_child0.Style().SetAlignItems(AlignCenter)
	root_child0.Style().SetWidth(100)
	root_child0.Style().SetHeight(100)
	root.InsertChild(root_child0, 0)

	root_child0_child0 := NewNodeWithConfig(config)
	defer root_child0_child0.Free()
	root_child0_child0.Style().SetAlignContent(AlignStretch)
	root_child0_child0.Style().SetWidth(10)
	root_child0_child0.Style().SetHeight(10)
	root_child0.InsertChild(root_child0_child0, 0)
	root.Style().SetDirection(DirectionLTR)
	root.CalculateLayout(Undefined, Undefined, DirectionLTR)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 0, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 45, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Height())

	root.Style().SetDirection(DirectionRTL)
	root.CalculateLayout(Undefined, Undefined, DirectionRTL)

	assert.EqualValues(t, 0, root.Layout().Left())
	assert.EqualValues(t, 0, root.Layout().Top())
	assert.EqualValues(t, 100, root.Layout().Width())
	assert.EqualValues(t, 100, root.Layout().Height())

	assert.EqualValues(t, 0, root_child0.Layout().Left())
	assert.EqualValues(t, 0, root_child0.Layout().Top())
	assert.EqualValues(t, 100, root_child0.Layout().Width())
	assert.EqualValues(t, 100, root_child0.Layout().Height())

	assert.EqualValues(t, 90, root_child0_child0.Layout().Left())
	assert.EqualValues(t, 45, root_child0_child0.Layout().Top())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Width())
	assert.EqualValues(t, 10, root_child0_child0.Layout().Height())
}
